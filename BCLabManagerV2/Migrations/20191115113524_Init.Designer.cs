// <auto-generated />
using System;
using BCLabManager.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BCLabManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191115113524_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecordClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetUseCount");

                    b.Property<int?>("BatteryClassId");

                    b.Property<int?>("ChamberClassId");

                    b.Property<int?>("ChannelClassId");

                    b.Property<string>("ProgramName");

                    b.Property<string>("RecipeName");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("BatteryClassId");

                    b.HasIndex("ChamberClassId");

                    b.HasIndex("ChannelClassId");

                    b.ToTable("AssetUsageRecordClass");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetUseCount");

                    b.Property<int?>("BatteryTypeId");

                    b.Property<double>("CycleCount");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BatteryTypeId");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryTypeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CutoffDischargeVoltage");

                    b.Property<int>("LimitedChargeVoltage");

                    b.Property<string>("Manufactor");

                    b.Property<string>("Material");

                    b.Property<string>("Name");

                    b.Property<int>("NominalVoltage");

                    b.Property<int>("RatedCapacity");

                    b.Property<int>("TypicalCapacity");

                    b.HasKey("Id");

                    b.ToTable("BatteryTypes");
                });

            modelBuilder.Entity("BCLabManager.Model.ChamberClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetUseCount");

                    b.Property<double>("HighestTemperature");

                    b.Property<double>("LowestTemperature");

                    b.Property<string>("Manufactor");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Chambers");
                });

            modelBuilder.Entity("BCLabManager.Model.ChannelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetUseCount");

                    b.Property<string>("Name");

                    b.Property<int?>("TesterId");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("BCLabManager.Model.EstimateTimeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("AverageTime");

                    b.Property<int?>("BatteryTypeId");

                    b.Property<int>("ExecutedCount");

                    b.Property<int?>("SubTemplateId");

                    b.Property<int>("TestCount");

                    b.HasKey("Id");

                    b.HasIndex("BatteryTypeId");

                    b.HasIndex("SubTemplateId");

                    b.ToTable("EstimateTimeRecords");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BatteryTypeId");

                    b.Property<string>("Description");

                    b.Property<TimeSpan>("ED");

                    b.Property<DateTime>("EET");

                    b.Property<DateTime>("EST");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<ulong>("Order");

                    b.Property<DateTime>("RequestTime");

                    b.Property<string>("Requester");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("BatteryTypeId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("BCLabManager.Model.RawDataClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<string>("MD5");

                    b.Property<int?>("TestRecordClassId");

                    b.HasKey("Id");

                    b.HasIndex("TestRecordClassId");

                    b.ToTable("RawDataClass");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("ED");

                    b.Property<DateTime>("EET");

                    b.Property<DateTime>("EST");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsAbandoned");

                    b.Property<int>("Loop");

                    b.Property<string>("Name");

                    b.Property<int?>("ProgramClassId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ProgramClassId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RecipeTemplates");
                });

            modelBuilder.Entity("BCLabManager.Model.StepClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ushort>("LoopCount");

                    b.Property<string>("LoopLabel");

                    b.Property<string>("LoopTarget");

                    b.Property<int?>("RecipeTemplateId");

                    b.Property<int?>("StepTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("RecipeTemplateId");

                    b.HasIndex("StepTemplateId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntimeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("DesignCapacityInmAH");

                    b.Property<TimeSpan>("Duration");

                    b.Property<TimeSpan>("ED");

                    b.Property<DateTime>("EET");

                    b.Property<DateTime>("EST");

                    b.Property<DateTime>("EndTime");

                    b.Property<int?>("RecipeClassId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("StepId");

                    b.HasKey("Id");

                    b.HasIndex("RecipeClassId");

                    b.HasIndex("StepId");

                    b.ToTable("StepRuntimes");
                });

            modelBuilder.Entity("BCLabManager.Model.StepTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CurrentInput");

                    b.Property<int>("CurrentUnit");

                    b.Property<int>("CutOffConditionType");

                    b.Property<double>("CutOffConditionValue");

                    b.Property<double>("Offset");

                    b.Property<double>("Slope");

                    b.Property<double>("Temperature");

                    b.HasKey("Id");

                    b.ToTable("StepTemplates");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecordClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedBatteryId");

                    b.Property<int?>("AssignedChamberId");

                    b.Property<int?>("AssignedChannelId");

                    b.Property<string>("BatteryStr");

                    b.Property<string>("BatteryTypeStr");

                    b.Property<string>("ChamberStr");

                    b.Property<string>("ChannelStr");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CompleteTime");

                    b.Property<double>("NewCycle");

                    b.Property<string>("ProgramStr");

                    b.Property<int?>("RecipeClassId");

                    b.Property<string>("RecipeStr");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Status");

                    b.Property<string>("Steps");

                    b.Property<string>("TesterStr");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBatteryId");

                    b.HasIndex("AssignedChamberId");

                    b.HasIndex("AssignedChannelId");

                    b.HasIndex("RecipeClassId");

                    b.ToTable("TestRecords");
                });

            modelBuilder.Entity("BCLabManager.Model.TesterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Manufactor");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecordClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryClass")
                        .WithMany("Records")
                        .HasForeignKey("BatteryClassId");

                    b.HasOne("BCLabManager.Model.ChamberClass")
                        .WithMany("Records")
                        .HasForeignKey("ChamberClassId");

                    b.HasOne("BCLabManager.Model.ChannelClass")
                        .WithMany("Records")
                        .HasForeignKey("ChannelClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryTypeClass", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId");
                });

            modelBuilder.Entity("BCLabManager.Model.ChannelClass", b =>
                {
                    b.HasOne("BCLabManager.Model.TesterClass", "Tester")
                        .WithMany()
                        .HasForeignKey("TesterId");
                });

            modelBuilder.Entity("BCLabManager.Model.EstimateTimeRecord", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryTypeClass", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId");

                    b.HasOne("BCLabManager.Model.RecipeTemplate", "SubTemplate")
                        .WithMany()
                        .HasForeignKey("SubTemplateId");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryTypeClass", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId");
                });

            modelBuilder.Entity("BCLabManager.Model.RawDataClass", b =>
                {
                    b.HasOne("BCLabManager.Model.TestRecordClass")
                        .WithMany("RawDataList")
                        .HasForeignKey("TestRecordClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeClass", b =>
                {
                    b.HasOne("BCLabManager.Model.ProgramClass")
                        .WithMany("Recipes")
                        .HasForeignKey("ProgramClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.StepClass", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeTemplate")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeTemplateId");

                    b.HasOne("BCLabManager.Model.StepTemplate", "StepTemplate")
                        .WithMany()
                        .HasForeignKey("StepTemplateId");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntimeClass", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeClass")
                        .WithMany("StepRuntimes")
                        .HasForeignKey("RecipeClassId");

                    b.HasOne("BCLabManager.Model.StepClass", "Step")
                        .WithMany()
                        .HasForeignKey("StepId");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecordClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryClass", "AssignedBattery")
                        .WithMany()
                        .HasForeignKey("AssignedBatteryId");

                    b.HasOne("BCLabManager.Model.ChamberClass", "AssignedChamber")
                        .WithMany()
                        .HasForeignKey("AssignedChamberId");

                    b.HasOne("BCLabManager.Model.ChannelClass", "AssignedChannel")
                        .WithMany()
                        .HasForeignKey("AssignedChannelId");

                    b.HasOne("BCLabManager.Model.RecipeClass")
                        .WithMany("TestRecords")
                        .HasForeignKey("RecipeClassId");
                });
#pragma warning restore 612, 618
        }
    }
}
