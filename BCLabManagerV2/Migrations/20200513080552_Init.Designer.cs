// <auto-generated />
using System;
using BCLabManager.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BCLabManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200513080552_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecordClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChamberClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChannelClassId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgramName")
                        .HasColumnType("text");

                    b.Property<string>("RecipeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatteryClassId");

                    b.HasIndex("ChamberClassId");

                    b.HasIndex("ChannelClassId");

                    b.ToTable("AssetUsageRecordClass");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("CycleCount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BatteryTypeId");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryTypeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CutoffDischargeVoltage")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndCurrent")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndingTimeout")
                        .HasColumnType("integer");

                    b.Property<int>("LimitedChargeVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("Manufactor")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NominalVoltage")
                        .HasColumnType("integer");

                    b.Property<int>("RatedCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("TypicalCapacity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BatteryTypes");
                });

            modelBuilder.Entity("BCLabManager.Model.ChamberClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnType("integer");

                    b.Property<double>("HighestTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("LowestTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Manufactor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chambers");
                });

            modelBuilder.Entity("BCLabManager.Model.ChannelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("TesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("BCLabManager.Model.CoefficientClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Offset")
                        .HasColumnType("double precision");

                    b.Property<double>("Slope")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("CoefficientClass");
                });

            modelBuilder.Entity("BCLabManager.Model.EvResultClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeClassId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipeClassId");

                    b.ToTable("EvResultClass");
                });

            modelBuilder.Entity("BCLabManager.Model.EvSettingClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DesignCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("DischargeEndVoltage")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndCurrent")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndingTimeout")
                        .HasColumnType("integer");

                    b.Property<int>("LimitedChargeVoltage")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectClassId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectClassId");

                    b.ToTable("EvSettingClass");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ED")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsInvalid")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Order")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Requester")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TableFilePath")
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramTypeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProgramTypes");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AbsoluteMaxCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<int>("CutoffDischargeVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LimitedChargeVoltage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("VoltagePoints")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BatteryTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectClassId");

                    b.ToTable("ProjectProductClass");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("ED")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgramClassId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RecipeTemplates");
                });

            modelBuilder.Entity("BCLabManager.Model.StepClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("CRate")
                        .HasColumnType("double precision");

                    b.Property<int>("CompareMark")
                        .HasColumnType("integer");

                    b.Property<int>("LoopCount")
                        .HasColumnType("integer");

                    b.Property<string>("LoopLabel")
                        .HasColumnType("text");

                    b.Property<string>("LoopTarget")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeTemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("StepTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipeTemplateId");

                    b.HasIndex("StepTemplateId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntimeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("DesignCapacityInmAH")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("ED")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StepTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipeClassId");

                    b.HasIndex("StepTemplateId");

                    b.ToTable("StepRuntimes");
                });

            modelBuilder.Entity("BCLabManager.Model.StepTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CoefficientId")
                        .HasColumnType("integer");

                    b.Property<double>("CurrentInput")
                        .HasColumnType("double precision");

                    b.Property<int>("CurrentUnit")
                        .HasColumnType("integer");

                    b.Property<int>("CutOffConditionType")
                        .HasColumnType("integer");

                    b.Property<double>("CutOffConditionValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CoefficientId");

                    b.ToTable("StepTemplates");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecordClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignedBatteryId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedChamberId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedChannelId")
                        .HasColumnType("integer");

                    b.Property<string>("BatteryStr")
                        .HasColumnType("text");

                    b.Property<string>("BatteryTypeStr")
                        .HasColumnType("text");

                    b.Property<double>("CapacityDifference")
                        .HasColumnType("double precision");

                    b.Property<string>("ChamberStr")
                        .HasColumnType("text");

                    b.Property<string>("ChannelStr")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<double>("Current")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("MeasurementGain")
                        .HasColumnType("double precision");

                    b.Property<double>("MeasurementOffset")
                        .HasColumnType("double precision");

                    b.Property<double>("NewCycle")
                        .HasColumnType("double precision");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("ProgramStr")
                        .HasColumnType("text");

                    b.Property<string>("ProjectStr")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeClassId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipeStr")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("TestFilePath")
                        .HasColumnType("text");

                    b.Property<string>("TesterStr")
                        .HasColumnType("text");

                    b.Property<double>("TraceResistance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBatteryId");

                    b.HasIndex("AssignedChamberId");

                    b.HasIndex("AssignedChannelId");

                    b.HasIndex("RecipeClassId");

                    b.ToTable("TestRecords");
                });

            modelBuilder.Entity("BCLabManager.Model.TesterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Manufactor")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecordClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryClass", null)
                        .WithMany("Records")
                        .HasForeignKey("BatteryClassId");

                    b.HasOne("BCLabManager.Model.ChamberClass", null)
                        .WithMany("Records")
                        .HasForeignKey("ChamberClassId");

                    b.HasOne("BCLabManager.Model.ChannelClass", null)
                        .WithMany("Records")
                        .HasForeignKey("ChannelClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryTypeClass", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId");
                });

            modelBuilder.Entity("BCLabManager.Model.ChannelClass", b =>
                {
                    b.HasOne("BCLabManager.Model.TesterClass", "Tester")
                        .WithMany()
                        .HasForeignKey("TesterId");
                });

            modelBuilder.Entity("BCLabManager.Model.EvResultClass", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeClass", null)
                        .WithMany("EvResults")
                        .HasForeignKey("RecipeClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.EvSettingClass", b =>
                {
                    b.HasOne("BCLabManager.Model.ProjectClass", null)
                        .WithMany("EvSettings")
                        .HasForeignKey("ProjectClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramClass", b =>
                {
                    b.HasOne("BCLabManager.Model.ProjectClass", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("BCLabManager.Model.ProgramTypeClass", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryTypeClass", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectProductClass", b =>
                {
                    b.HasOne("BCLabManager.Model.ProjectClass", null)
                        .WithMany("ProjectProducts")
                        .HasForeignKey("ProjectClassId");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeClass", b =>
                {
                    b.HasOne("BCLabManager.Model.ProgramClass", null)
                        .WithMany("Recipes")
                        .HasForeignKey("ProgramClassId");

                    b.HasOne("BCLabManager.Model.RecipeTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("BCLabManager.Model.StepClass", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeTemplate", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeTemplateId");

                    b.HasOne("BCLabManager.Model.StepTemplate", "StepTemplate")
                        .WithMany()
                        .HasForeignKey("StepTemplateId");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntimeClass", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeClass", null)
                        .WithMany("StepRuntimes")
                        .HasForeignKey("RecipeClassId");

                    b.HasOne("BCLabManager.Model.StepTemplate", "StepTemplate")
                        .WithMany()
                        .HasForeignKey("StepTemplateId");
                });

            modelBuilder.Entity("BCLabManager.Model.StepTemplate", b =>
                {
                    b.HasOne("BCLabManager.Model.CoefficientClass", "Coefficient")
                        .WithMany()
                        .HasForeignKey("CoefficientId");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecordClass", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryClass", "AssignedBattery")
                        .WithMany()
                        .HasForeignKey("AssignedBatteryId");

                    b.HasOne("BCLabManager.Model.ChamberClass", "AssignedChamber")
                        .WithMany()
                        .HasForeignKey("AssignedChamberId");

                    b.HasOne("BCLabManager.Model.ChannelClass", "AssignedChannel")
                        .WithMany()
                        .HasForeignKey("AssignedChannelId");

                    b.HasOne("BCLabManager.Model.RecipeClass", null)
                        .WithMany("TestRecords")
                        .HasForeignKey("RecipeClassId");
                });
#pragma warning restore 612, 618
        }
    }
}
